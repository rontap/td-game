import {getState} from "./State";
import {jsobj} from "../app/util";
import {LineId, NodeId} from "../node/Line";
// de and re serialise content
/* eslint import/no-webpack-loader-syntax: off */
const css = require('!!raw-loader!../svg.css').default;

class Serialiser {
    toID(id: NodeId | LineId): string {
        return "id-" + id;
    }

    toJSON(): jsobj {
        const parsedNodes = getState().nodes.map(node => {
            console.log(node, '<<');
            const nodeProps = node.nodeProps;
            return {
                ptr: node,
                name: this.toID(node.ID),
                [nodeProps.config?.self]: {
                    ...node._configValues,
                },
                inputs: node.prevNodes.map(this.toID),
                outputs: node.nextNodes.map(this.toID)
            }
        });
        console.log(parsedNodes);
        return parsedNodes;
    }

    fromJSON(obj: jsobj) {
        // todo , fill nodes
        // todo fill lines
        // todo initial fillup of store.?


    }

    toTopLevel(transform: jsobj[]): jsobj {
        return {
            description: 'generated by STS',
            transform
        }
    }

    fromTopLevel(obj: jsobj): jsobj {
        return {}
    }


    // SVG

    toSvg() {
        const svgRoot = document.getElementById("svgRootCont")!.innerHTML;

        const parsedCss = css.replace(/\n/g, " ");
        // slice </svg> off
        const svgRootCss = svgRoot
            .slice(0, -6)
            .concat(`<style>${parsedCss}</style></svg>`);
        return svgRootCss;
    }


}

const SerialiserInst = new Serialiser();

export {SerialiserInst};
// @ts-ignore
window.SI = SerialiserInst;
export default Serialiser;